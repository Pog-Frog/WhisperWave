// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  email    String?   @unique
  emailVerified DateTime?
  name     String?
  hashedPassword String?
  image   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  conversationsIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationsIds], references: [id])

  seenMessagesIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])

  accounts Account[]
  messages Message[]
}

model Account {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  type     String
  provider String
  providerAccountId String
  refreshToken String? @db.String
  accessToken String? @db.String
  expiresAt Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Message {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body     String?
  image    String?

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id])

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

